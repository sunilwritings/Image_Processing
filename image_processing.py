# -*- coding: utf-8 -*-
"""Image_Processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1998ZeoCh0d01yoMYqBIXXY3IVhksUzob
"""


import streamlit as st
import cv2
from PIL import Image
import numpy as np

# Function to resize an image
def resize_image(image, width=1080, height=720):
    return cv2.resize(image, (width, height))

# Function to convert OpenCV image (BGR) to RGB for display
def convert_to_display_format(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Main Streamlit App
def main():
    st.title("Image Processing with Streamlit")

    # Sidebar: Image uploader
    uploaded_file = st.file_uploader("Upload an Image", type=["jpg", "jpeg", "png"])

    if uploaded_file:
        # Load the image
        image = Image.open(uploaded_file)
        image = np.array(image)  # Convert to numpy array for OpenCV compatibility

        # Resize image
        resized_image = resize_image(image)
        st.image(convert_to_display_format(resized_image), caption="Resized Image", use_column_width=True)

        # Buttons for transformations
        if st.button("Gray"):
            gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)
            st.image(gray_image, caption="Gray Image", use_column_width=True, channels="GRAY")

        if st.button("Blur"):
            blur_image = cv2.GaussianBlur(resized_image, (15, 15), 0)
            st.image(convert_to_display_format(blur_image), caption="Blurred Image", use_column_width=True)

        if st.button("Edge"):
            edges = cv2.Canny(resized_image, 100, 200)
            st.image(edges, caption="Edge Detection", use_column_width=True, channels="GRAY")

if __name__ == "__main__":
    main()
